{"version":3,"sources":["components/GlobalStyle.js","components/Name/NamePresenter.js","components/Name/index.js","components/Name/NameContainer.js","components/Clock/ClockPresenter.js","components/Clock/index.js","components/Clock/ClockContainer.js","components/Search/SearchPresenter.js","components/Search/index.js","components/Search/SearchContainer.js","components/Weather/WeatherPresenter.js","components/Weather/index.js","components/Weather/WeatherContainer.js","App.js","index.js"],"names":["GlobalStyle","createGlobalStyle","reset","fadeAni","keyframes","Form","styled","form","Text","span","Input","input","NamePresenter","value","handleChange","handleSubmit","onSubmit","onChange","NameContainer","state","e","setState","target","preventDefault","props","saveName","this","Component","Container","div","Time","Greeting","ClockPresenter","name","time","greeting","ClockContainer","getTime","date","Date","hour","getHours","minute","getMinutes","setInterval","SearchIcon","i","prop","isOpen","SearchPresenter","searchButton","className","onClick","SearchContainer","window","location","href","Temp","Name","Location","WeatherPresenter","temp","WeatherContainer","api","axios","create","baseURL","params","appid","navigator","geolocation","getCurrentPosition","position","get","lat","coords","latitude","lon","longitude","err","console","log","then","res","Math","ceil","data","main","weather","catch","App","localStorage","setItem","getName","getItem","Clock","Search","Weather","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0fb38d2f.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\nimport reset from 'styled-reset';\n\nconst GlobalStyle = createGlobalStyle`\n  ${reset};\n  a {\n      text-decoration: none;\n      color: inherit;\n  }\n  \n  * {\n      box-sizing: border-box;\n  }\n  \n  body {\n      font-family: 'Nanum Gothic', sans-serif;\n      font-size: 1rem;\n      color: #fff;\n      width: 100%;\n      height: 100vh;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      background: url(https://source.unsplash.com/7vKP5BAm8wg/1600x900);\n      background-size: cover;\n  }\n`;\n\nexport default GlobalStyle;","// 사용자의 이름을 입력받기 위한 Presenter\nimport React from 'react';\nimport styled, { keyframes } from \"styled-components\";\nimport PropTypes from 'prop-types';\n\n// 애니메이션 효과 추가 (흐릿한 화면에서 선명해 지는)\nconst fadeAni = keyframes`\n  from {\n            opacity: 0;\n  }\n  to {\n            opacity: 1;\n  }\n`;\n\nconst Form = styled.form`\n  animation: ${fadeAni} 2s linear;\n  display: flex;\n  flex-direction: column;\n  font-size: 2rem;\n`;\n\nconst Text = styled.span`\n  font-weight: bold;\n  margin-bottom: 0.5rem;\n`;\n\nconst Input = styled.input`\n  all: unset;\n  border-bottom: 2px solid #fff;\n  text-align: center;\n`;\n\n// value(입력 내용), handleChange(입력창에 글 수정 및 입력가능), handleSubmit(Enter 눌렀을 때 동작)\nconst NamePresenter = ({ value, handleChange, handleSubmit }) => (\n    <Form onSubmit={handleSubmit}>\n        <Text>Hello, what's your name?</Text>\n        <Input value={value} onChange={handleChange} />\n    </Form>\n);\n\nNamePresenter.propTypes = {\n    value: PropTypes.string.isRequired,\n    handleChange: PropTypes.func.isRequired,\n    handleSubmit: PropTypes.func.isRequired\n};\n\nexport default NamePresenter;","import NameContainer from \"./NameContainer\";\n\nexport default NameContainer;","// 사용자의 이름을 입력받기 위한 Container\nimport React, {Component} from 'react';\nimport NamePresenter from \"./NamePresenter\";\n\nclass NameContainer extends Component {\n    state = {\n        value: ''\n    };\n\n    // 사용자가 입력한 input 값을 value에 저장\n    handleChange = e => {\n        this.setState({\n            value: e.target.value // 현재 input에 입력된 값 가져오기\n        });\n    };\n\n    handleSubmit = e => {\n        e.preventDefault(); // onSubmit의 기본적인 이벤트 방지(새로고침)\n        const { value } = this.state;\n        this.props.saveName(value); // 입력 내용을 saveName에 저장한 후 props로 받아온다\n    };\n    render() {\n        const { value } = this.state;\n        // presenter에 prop 값 전달\n        return (\n            <NamePresenter handleSubmit={this.handleSubmit} handleChange={this.handleChange} value={value} />\n        );\n    }\n}\n\nexport default NameContainer;\n","import React from 'react';\nimport styled from \"styled-components\";\nimport PropTypes from 'prop-types';\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst Time = styled.span`\n  font-size: 3em;\n  margin-bottom: 0.5rem;\n`;\n\nconst Greeting = styled.span`\n  font-size: 2rem;\n`;\n\nconst ClockPresenter = ({ name, time, greeting }) => (\n    <Container>\n        <Time>{time}</Time>\n        <Greeting>{`${greeting}, ${name}`}</Greeting>\n    </Container>\n);\n\nClockPresenter.propTypes = {\n    name: PropTypes.string.isRequired,\n    time: PropTypes.string.isRequired,\n    greeting: PropTypes.string.isRequired\n};\n\nexport default ClockPresenter;","import ClockContainer from \"./ClockContainer\";\n\nexport default ClockContainer;","import React, {Component} from 'react';\nimport ClockPresenter from \"./ClockPresenter\";\n\nclass ClockContainer extends Component {\n    // state 값인 time, greeting의 초기 설정(두 개 다 String, 왜냐하면 ClockPresenter에서 PropTypes를 String으로 지정해 줬기 때문)\n    state = {\n        time: '',\n        greeting: ''\n    };\n\n    // 시간과 인사 문구를 얻는 getTime 함수\n    getTime = () => {\n        const date = new Date();\n        const hour = date.getHours();\n        const minute = date.getMinutes();\n        // time 조건문(9이하 숫자 앞에는 0을 붙인다)\n        const time = `${hour > 9 ? hour : `0${hour}`} : ${minute > 9 ? minute : `0${minute}`}`;\n        this.setState({\n            time\n        });\n\n        // 시간대 별 인사 문구\n        if(hour >= 5 && hour < 12) {\n            this.setState({\n                greeting: 'Good Morning'\n            });\n        } else if(hour >= 12 && hour < 17) {\n            this.setState({\n                greeting: 'Good Afternoon'\n            });\n        } else {\n            this.setState({\n                greeting: 'Good Evening'\n            });\n        }\n    };\n\n    componentDidMount() {\n        setInterval(this.getTime, 1); // 현재 시간을 실시간으로 업데이트 되게 한다\n    }\n\n    render() {\n        const { time, greeting } = this.state;\n        const { name } = this.props;\n        return (\n            <ClockPresenter greeting={greeting} time={time} name={name} />\n        );\n    }\n}\n\nexport default ClockContainer;","import React from 'react';\nimport styled from \"styled-components\";\nimport PropTypes from 'prop-types';\n\nconst Container = styled.div`\n  position: fixed;\n  display: flex;\n  left: 0;\n  top: 0;\n  margin: 1rem;\n`;\n\nconst Text = styled.span`\n  margin-right: 1rem;\n  font-weight: bold;\n`;\n\nconst SearchIcon = styled.i`\n  position: absolute;\n  cursor: pointer;\n`;\n\nconst Input = styled.input`\n  all: unset;\n  border-bottom: 2px solid #fff;\n  padding-left: 1.5rem;\n  padding-bottom: 0.5rem;\n  // visibility: ${prop => (prop.isOpen === true ? 'visible' : 'hidden')};\n`;\n\nconst SearchPresenter = ({ value, isOpen, handleSubmit, handleChange, searchButton }) => (\n    <Container>\n        <Text>Search</Text>\n        <form onSubmit={handleSubmit}>\n            <SearchIcon className=\"fas fa-search\" onClick={searchButton}/>\n            <Input value={value} onChange={handleChange} isOpen={isOpen} />\n        </form>\n    </Container>\n);\n\nSearchPresenter.propTypes = {\n    value: PropTypes.string,\n    isOpen: PropTypes.bool.isRequired,\n    handleSubmit: PropTypes.func.isRequired,\n    handleChange: PropTypes.func.isRequired,\n    searchButton: PropTypes.func.isRequired\n};\n\nexport default SearchPresenter;\n\n","import SearchContainer from \"./SearchContainer\";\n\nexport default SearchContainer;","import React, {Component} from 'react';\nimport SearchPresenter from \"./SearchPresenter\";\n\nclass SearchContainer extends Component {\n    state = {\n        value: '',\n        isOpen: false\n    };\n\n    handleChange = e => {\n        this.setState({\n            value: e.target.value\n        });\n    }\n\n    handleSubmit = e => {\n        e.preventDefault();\n        // 현재 입력된 value 값이 쿼리문에 담긴 url주소로 리다이렉트\n        window.location.href = `https://www.google.com/search?q=${this.state.value}&PC=ATMM&FORM=MMXT01`;\n    }\n\n    searchButton = () => {\n        this.setState({\n            isOpen: true\n        });\n    }\n    render() {\n        const { value, isOpen } = this.state;\n        return (\n            <SearchPresenter\n                value={value}\n                isOpen={isOpen}\n                handleSubmit={this.handleSubmit}\n                handleChange={this.handleChange}\n                searchButton={this.searchButton}\n            />\n        );\n    }\n}\n\nexport default SearchContainer;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n  position: fixed;\n  right: 0;\n  top: 0;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin: 1rem;\n`;\n\nconst Temp = styled.span`\n  font-weight: 500;\n  font-size: 1.2rem;\n  display: flex;\n  align-items: center;\n  margin-bottom: 0.5rem;\n`;\n\nconst Name = styled.span`\n  font-weight: 400;\n  font-size: 0.8rem;\n  margin-right: 0.2rem;\n`;\n\nconst Location = styled.span`\n  font-size: 0.5rem;\n`;\n\nconst WeatherPresenter = ({ temp, name, location }) => (\n    <Container>\n        <Temp>\n            <Name>{name}</Name>\n            {temp}˚\n        </Temp>\n        <Location>{location}</Location>\n    </Container>\n);\n\nWeatherPresenter.propTypes = {\n    temp: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    location: PropTypes.string.isRequired\n}\n\nexport default WeatherPresenter;","import WeatherContainer from \"./WeatherContainer\";\n\nexport default WeatherContainer;","import React, {Component} from 'react';\nimport WeatherPresenter from \"./WeatherPresenter\";\nimport axios from 'axios';\n\nclass WeatherContainer extends Component {\n    state = {\n        temp: '',\n        name: '',\n        location: ''\n    };\n\n    api = axios.create({\n        baseURL: 'https://api.openweathermap.org/data/2.5',\n        params: {\n            appid: 'b6907d289e10d714a6e88b30761fae22'\n        }\n    });\n\n    componentDidMount() {\n        // getCurrentPosition 함수로 사용자의 현재 위치 파악\n        navigator.geolocation.getCurrentPosition(position => {\n            // api 추가 파라미터로 latitude, longitude 추가\n            const getWeather = this.api.get('/weather',\n                {\n                            params: {\n                                lat: position.coords.latitude,\n                                lon: position.coords.longitude\n                            },\n                    },\n                    err => console.log(err)\n                );\n            getWeather\n                .then(res => {\n                    this.setState({\n                        temp: Math.ceil(res.data.main.temp - 273.15),\n                        name: res.data.weather[0].main,\n                        location: res.data.name\n                    });\n                })\n                .catch(err => console.log(err));\n        });\n    }\n\n    render() {\n        const { location, name, temp } = this.state;\n        return (\n            <WeatherPresenter\n                location={location}\n                name={name}\n                temp={temp}\n            />\n        );\n    }\n}\n\nexport default WeatherContainer;","import React, {Component} from 'react';\nimport GlobalStyle from \"./components/GlobalStyle\";\nimport Name from './components/Name';\nimport Clock from './components/Clock';\nimport Search from './components/Search';\nimport Weather from './components/Weather';\n\nclass App extends Component {\n    // name 이라는 state 초기 설정\n    state = {\n        name: null, // 초기의 name은 아무것도 없다\n    };\n\n    // NamePresenter 컴포넌트에서 전달받은 데이터를 state의 name과 localStorage에 저장\n    saveName = data => {\n        this.setState({\n            name: data, // name에 입력받은 data를 넣으면서 state를 수정\n        });\n        localStorage.setItem('MOMENTUM_NAME', data); // localStorage에 입력받은 name 값(data)을 저장\n    };\n\n    // getName 함수를 통하여 현재 localStorage에 저장된 name 값이 null이 아닌 경우에 name 값을 저장하도록 함\n    getName = () => {\n        const name = localStorage.getItem('MOMENTUM_NAME');\n        if(name !== null) {\n            this.setState({\n                name,\n            });\n        }\n    };\n\n    componentDidMount() {\n        this.getName();\n    }\n\n    render() {\n        const { name } = this.state;\n        return (\n            <>\n                <GlobalStyle />\n                {name === null ? (\n                        <Name saveName={this.saveName} />\n                    ) : (\n                        <>\n                            <Clock name={name} />\n                            <Search />\n                            <Weather />\n                        </>\n                    )}\n            </>\n        );\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}